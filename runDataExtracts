#Before you can use this, please complete the following requirements:
#
#
# 1. Download the Client Utilities folder from Vertex Community and then configure your .properties file from within 
# it to point to your current O Series environment. This will be the /vertex-remove-services
#
#
# 2. Create two data extract definitions: One using the template 'taxpayer registrations' and name it TAXPAYERREGISTRATIONS
# the other one using template 'taxability mapping' and name it TAXABILITYMAPPING.










import tkinter as tk
from tkinter import filedialog
import subprocess
import os
import platform

# Global variables to store selected directory for output file, credentials, and records
utilities_file_path = ""
api_user = ""
api_password = ""


# Function to browse and select the directory where the client utilities /bin is located
def browse_directory():
    global utilities_file_path

    # Ask the user to select a directory
    directory = filedialog.askdirectory(title="Select Directory")

    # Update global path if a directory was selected but ad a \ to ensure the execute_terminal_command
    # actually runs correctly
    if directory:
        utilities_file_path = os.path.join(directory) + "\\"

        # Update the label to show the selected directory
        directory_label.config(text=f"Selected directory: {directory}")


# Function to execute the client utilities
def execute_terminal_command():
    global api_user, api_password, utilities_file_path

    # Retrieve the values from the input fields
    api_user = api_user_entry.get()
    api_password = api_password_entry.get()

    # Check if the credentials and database are provided
    if not api_user or not api_password:
        result_label.config(text="Please provide both API user and password.")
        return

    # Determine the file extension based on the operating system
    if platform.system() == "Windows":
        bat_or_sh = "bat"  # For Windows, use .bat
    else:
        bat_or_sh = "sh"  # For non-Windows, use .sh

    # Check if output file exists after the command runs
    if utilities_file_path:
        try:
            # Build the main command with dynamic API user and password but tailored to whether or not the system
            # running the process is Windows or not
            if platform.system() == "Windows":
                run_taxabilitymapping_command = (f".\\runDataExtract.{bat_or_sh} -u {api_user} -p {api_password}"
                                                 f" -n TAXABILITYMAPPING -l taxabilitymapping.csv")

                run_taxpayerregistrations_command = (f".\\runDataExtract.{bat_or_sh} -u {api_user} -p {api_password}"
                                                     f" -n TAXPAYERREGISTRATIONS -l taxpayerregistrations.csv")
            else:
                run_taxabilitymapping_command = (f"./runDataExtract.{bat_or_sh} -u {api_user} -p {api_password}"
                                                 f" -n TAXABILITYMAPPING -l taxabilitymapping.csv")

                run_taxpayerregistrations_command = (f"./runDataExtract.{bat_or_sh} -u {api_user} -p {api_password}"
                                                     f" -n TAXPAYERREGISTRATIONS -l taxpayerregistrations.csv")

            # Joins the current selected path of the client utilities /bin folder with the command to run the extracts
            full_command_run_taxabilitymapping = (f"cd {os.path.dirname(utilities_file_path)} && "
                                                  f"{run_taxabilitymapping_command}")

            full_command_run_taxpayerregistrations = (f"cd {os.path.dirname(utilities_file_path)} && "
                                                      f"{run_taxpayerregistrations_command}")

            # Run first command in the selected directory
            subprocess.run(full_command_run_taxabilitymapping, shell=True, check=True)

            # Run second command in the selected directory
            subprocess.run(full_command_run_taxpayerregistrations, shell=True, check=True)

            # Update the result label
            result_label.config(text="***Data Extract(s) Complete***")

        except subprocess.CalledProcessError as e:
            result_label.config(text=f"Error running command: {e}")
    else:
        result_label.config(text="No path selected!")


# Create the main window
root = tk.Tk()
root.title("Run Command")

# Label and entry for API user
api_user_label = tk.Label(root, text="API User:")
api_user_label.pack(pady=5)
api_user_entry = tk.Entry(root)
api_user_entry.pack(pady=5)

# Label and entry for API password
api_password_label = tk.Label(root, text="API Password:")
api_password_label.pack(pady=5)
api_password_entry = tk.Entry(root, show="*")  # hide password input
api_password_entry.pack(pady=5)

# Create a button that will trigger the PowerShell command execution
execute_button = tk.Button(root, text="Run Command", command=execute_terminal_command)
execute_button.pack(pady=20)

# Create a button that will prompt the user to browse and select a directory
browse_button = tk.Button(root, text="Browse Directory", command=browse_directory)
browse_button.pack(pady=10)

# Label to display the selected directory
directory_label = tk.Label(root, text="No directory selected")
directory_label.pack(pady=10)

# Label to display the results
result_label = tk.Label(root, text="Results will be shown here.")
result_label.pack(pady=10)

# Start the Tkinter event loop
root.mainloop()
